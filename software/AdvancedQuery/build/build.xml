<?xml version ="1.0"?>
<!--Ant Script for create Build for Query -->
<project name="Query Build" default="compile" basedir="./">

    <property name="base.dir" value="${basedir}/.." />

    <import file="ivy-targets.xml" />
	<import file="${base.dir}/conf/build-properties.xml" />

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${base.dir}/lib/server/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!--define require dir and Properties -->
	<property file="${base.dir}/conf/advanceQuery.properties" />
	<property name="dist.dir" value="${base.dir}/dist" />
	<property name="src.dir" value="${base.dir}/src/main/java" />
	<property name="test.dir" value="${base.dir}/src/test/java" />
    <property name="test.src.dir" value="${base.dir}/src/main/java/edu/wustl/quey/bizlogic/test" />
    <property name="test.class.dir" value="${dist.dir}/WEB-INF/classes/edu/wustl/quey/bizlogic/test" />

	<property name="target.dir" value="${base.dir}/target" />
	<property name="lib.dir" value="${base.dir}/lib/client" />
	<property name="hbm.dir" value="${src.dir}/edu/wustl/query/hbm" />
	<property name="extra_lib.dir" value="${base.dir}/lib/server" />
	<property name="generateforce" value="true" />
	<property name="junit.jar" value="${lib.dir}/junit-3.8.1.jar" />
	<property name="cobertura.dir" value="${target.dir}/reports/coverage" />
	<property name="report.dir" value="${dist.dir}/report" />

	<!-- csm related properties -->
	<property name="temp.dir" value="${target.dir}/tempQuey" />
	<property name="project.src.domain" value="${base.dir}/src/main/java/edu/wustl/query/domain/" />
	<property name="mysql.dialect.string" value="org.hibernate.dialect.MySQLDialect" />
	<property name="datasource" value="java:/query" />

	<property name="junit.dir" value="${target.dir}/junit" />
	<property name="junit.report.dir" value="${target.dir}/junit" />
	<property name="cobertura.location" value="${base.dir}/cobertura" />
	<property name="test.instrumented.dir" value="${base.dir}/cobertura/instrument" />
	<property name="cobertura.lib" value="${base.dir}/coberturaLib" />
	<property name="coverage.dir" value="${base.dir}/cobertura" />
	<property name="test.classes.dir" value="${dist.dir}/test/classes" />

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.lib}">
			<include name="cobertura.jar" />
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<loadfile property="dist.revision" srcFile="./.svn/entries">
		<filterchain>
			<headfilter lines="1" skip="4" />
		</filterchain>
	</loadfile>

	<!-- flex related properties -->
	<property name="FLEX_HOME" value="C:/Flex SDK 2" />
	<property name="FLEX_APP_ROOT" value="${base.dir}/src/main/resources/flexclient" />
	<property name="flex.dir" value="${base.dir}/src/main/resources/flex" />
	<!-- flex related properties finish -->
	<path id="app.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="xdoclet.classpath">
		<path refid="app.classpath" />
		<pathelement location="${extra_lib.dir}/commons-net-1.2.2.jar" />
		<pathelement location="${extra_lib.dir}/hibernate-tools.jar" />
		<pathelement location="${extra_lib.dir}/servlet-api.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-1.2.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-hibernate-module-1.2.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-xdoclet-module-1.2.jar" />
		<pathelement location="${extra_lib.dir}/xerces.jar" />
		<pathelement location="${extra_lib.dir}/xjavadoc-1.0.2.jar" />
		<pathelement location="${extra_lib.dir}/xsdlib.jar" />
	</path>

	<path id="junit.classpath">
		<pathelement location="${junit.jar}" />
		<pathelement location="${target.dir}" />
		<pathelement location="${base.dir}/cobertura/cobertura.jar" />
		<pathelement location="${base.dir}/cobertura/lib/jakarta-oro-2.0.8.jar" />
		<pathelement location="${base.dir}/cobertura/lib/asm-2.2.1.jar" />

		<path refid="app.classpath" />
	</path>

	<target name="init" description="initialize">
		<tstamp />

        <delete dir="${target.dir}" />
		<mkdir dir="${target.dir}" />

        <mkdir dir="${temp.dir}" />

        <delete dir="${junit.dir}" />
		<mkdir dir="${junit.dir}" />

        <delete dir="${test.instrumented.dir}" />
		<mkdir dir="${test.instrumented.dir}" />
	</target>

	<target name="clean" description="clean up">
		<delete includeemptydirs="true">
			<fileset dir="${target.dir}">
				<include name="**/*" />
				<exclude name="CVS" />
			</fileset>
		</delete>
	</target>

	<!-- Compile all files, generated and hand-written -->
	<target name="compile" depends="init, resolve">
        <mkdir dir="${target.dir}/WEB-INF/classes" />
		<javac destdir="${target.dir}/WEB-INF/classes" includes="**/*.*" includeAntRuntime="false" debug="true">
			<src path="${src.dir}" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<classpath refid="cobertura.classpath" />
		</javac>
		<copy todir="${target.dir}/WEB-INF">
			<fileset dir="${src.dir}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.xsl" />
				<include name="**/*.hbm.xml" />
				<include name="**/*.ser" />
			</fileset>
		</copy>
	</target>

	<!-- Creates the WAR (Web Application Archive) file of the application -->
	<target name="build_war" depends="init, compile, create_war" />

	<target name="create_war">
		<delete file="${dist.dir}/query.war" />

		<delete file="${base.dir}/MANIFEST.MF" />
		<manifest file="${base.dir}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Version" value="${application.name} ${application.version}" />
			<attribute name="CSM-Version" value="${csm.version}" />
			<attribute name="caCore-Version" value="${cacore.version}" />
			<attribute name="Build-on" value="${TODAY}" />
		</manifest>

		<replace dir="${target.dir}/WEB-INF/classes" propertyfile="${base.dir}/conf/queryInstall.properties">
			<include name="${base.dir}/conf/log4j.properties" />
			<replacefilter token="@@jbosshome@@" value="${jboss.server.url}" />
		</replace>

		<!-- Copy these two config files from other directory which contains the tekenized files -->
		<copy todir="${target.dir}/WEB-INF/classes" overwrite="true">
			<fileset dir="${base.dir}/src/main/resources/tokenizedFiles">
				<include name="QueryHibernate.cfg.xml" />
				<include name="DynamicExtensionsHibernate.cfg.xml" />
			</fileset>
		</copy>

		<!--Added By Baljeet for replacing the DataSource -->
		<replace file="${target.dir}/WEB-INF/classes/QueryHibernate.cfg.xml">
			<replacefilter token="${mysql.dialect.string}" value="${mysql.dialect.string}" />
			<replacefilter token="@@dataSource@@" value="${datasource}" />
		</replace>

		<replace file="${target.dir}/WEB-INF/classes/DynamicExtensionsHibernate.cfg.xml">
			<replacefilter token="${mysql.dialect.string}" value="${mysql.dialect.string}" />
			<replacefilter token="@@dataSource@@" value="${datasource}" />
		</replace>

<!--
		<antcall target="copydeletedjars">
			<param name="deleteFromDir" value="${base.dir}/lib/client" />
		</antcall>
-->

		<war destfile="${dist.dir}/query.war" webxml="${base.dir}/conf/web.xml" manifest="${base.dir}/MANIFEST.MF">

            <fileset dir="${base.dir}/src/main/web">
                <include name="stylesheets/**" />
                <include name="images/**" />
                <include name="javascripts/**" />
                <include name="dhtml/**" />
                <include name="pages/**" />
			</fileset>

            <fileset dir="${target.dir}" >
                <include name="WEB-INF/**" />
			</fileset>

			<fileset dir="${base.dir}/src/main/resources">
				<include name="flexclient/**" />
				<include name="runtime/**" />
				<include name="ApplicationVersionInfo.txt" />
				<!--		<include name="Query_User_Manual.pdf" />   -->

				<exclude name="**/WEB-INF/src*/**" />
				<exclude name="**/WEB-INF/lib/*.zip" />
				<exclude name="**/WEB-INF/lib/ant*.jar" />
				<exclude name="**/WEB-INF/lib/junit*.jar" />
				<exclude name="**/WEB-INF/lib/dom4*.jar" />
				<exclude name="**/*servlet.jar*" />

				<exclude name="**/*hibernate2.jar*" />
				<exclude name="**/*jta.jar*" />
				<exclude name="**/CVS*" />
				<exclude name="**/WEB-INF/lib/jta.jar" />
			</fileset>

			<!-- change for csm related war -->
			<!--<fileset dir="${temp.dir}/catissuecorecsm">
						<include name="**/WEB-INF/**"  />
						<include name="**/images/**" />
						<include name="**/log/**" />
						<include name="**/*" />

						<exclude name="**/WEB-INF/web.xml" />
						<exclude name="**/WEB-INF/classes/edu/wustl/catissuecore/domain/**" />
						<exclude name="**/WEB-INF/lib/csmapi.jar" />
						<exclude name="**/WEB-INF/lib/dom4*.jar" />
						<exclude name="**/WEB-INF/lib/jta.jar" />
						<exclude name="**/WEB-INF/lib/cglib*.jar" />
						<exclude name="**/META-INF/**" />
						<exclude name="Happy.jsp" />
						<exclude name="Criteria.jsp" />
       				</fileset> -->
			<!-- Chnages related to CSM war ends-->

		</war>

	</target>

	<target name="copydeletedjars">
		<echo>deleting unneccesary jars from ${deleteFromDir}</echo>
		<delete failonerror="false">
			<fileset dir="${deleteFromDir}">
				<include name="backport-util-concurrent-3.0.jar" />
				<include name="c3p0-0.8.4.5.jar" />
				<include name="c3p0-0.8.5.2.jar" />
				<include name="castor-1.0.2.jar" />
				<include name="cglib-2.1.jar" />
				<include name="commons-collections-2.1.1.jar" />
				<include name="commons-collections-3.1.jar" />
				<include name="commons-discovery-0.2.jar" />
				<include name="commons-fileupload.jar" />
				<include name="commons-lang-2.1.jar" />
				<include name="commons-logging-1.0.4.jar" />
				<include name="dom4*.jar" />
				<include name="ehcache-1.1.jar" />
				<include name="ehcache-1.2.2.jar" />
				<include name="freemarker.jar" />
				<include name="jakarta-oro.jar" />
				<include name="uml-1.3.jar" />
				<include name="wsdl4j-1.5.1.jar" />
				<include name="xalan-2.4.0.jar" />
				<include name="p6spy.jar" />
				<include name="sdkClient.jar" />
				<include name="uuid-key-generator.jar" />
				<include name="wsdl4j.jar" />
				<include name="j2ee.jar" />
				<include name="caGrid-1.0-caDSR-client.jar" />
				<include name="caGrid-1.0-caDSR-common.jar" />
				<include name="caGrid-1.0-caDSR-stubs.jar" />
				<include name="caGrid-1.0-core.jar" />
				<include name="caGrid-1.0-data-common.jar" />
				<include name="caGrid-1.0-data-stubs.jar" />
				<include name="caGrid-1.0-data-utils.jar" />
				<include name="caGrid-1.0-fqp-client.jar" />
				<include name="caGrid-1.0-fqp-common.jar" />
				<include name="caGrid-1.0-fqp-stubs.jar" />
				<include name="caGrid-1.0-metadata-common.jar" />
				<include name="caGrid-1.0-metadata-security.jar" />
				<include name="caGrid-1.0-sdkQuery.jar" />
				<include name="caGrid-1.0-ServiceSecurityProvider-client.jar" />
				<include name="caGrid-1.0-ServiceSecurityProvider-common.jar" />
				<include name="jboss-common-jdbc-wrapper.jar" />
				<include name="mysql-connector-java-3.1.13-bin.jar" />
				<include name="ojdbc14.jar" />
				<include name="boot.jar" />
				<include name="c3p0-0.9.0.jar" />
				<include name="query-client.jar" />
				<include name="experiment-client.jar" />
				<include name="jboss-client.jar" />
				<include name="junit-3.8.1.jar" />
				<include name="mockobjects-core-0.09.jar" />
				<!--include name="mysql-connector-java-5.0.8-bin.jar" / -->
				<include name="openide-util.jar" />
				<include name="acrobat-core.jar" />
			</fileset>

		</delete>
	</target>

	<!--Deploys the application war file at JBOSS server by coping it to deploy directory of application server-->
	<target name="deploy">
		<!--antcall target="clean" /-->
		<antcall target="compile" />
		<antcall target="create_war" />

		<copy file="query.war" todir="${jboss.server.url}/deploy" />
		<!-- copy file="dynamicExtensions.war" todir="${jboss.server.url}/deploy" / -->
	</target>



	<!--
		Generates the Hibernate mapping (HBM) files which are used in mapping
		the domain objects to database schema of the application.
		This generates the HBM files from the XDoclet tags written in the domain object classes.
	-->
	<target name="generate_hbm" description="Generates Hibernate class descriptor files.">
		<!-- Define the hibernatedoclet task -->
		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
			<classpath refid="xdoclet.classpath" />
		</taskdef>

		<!-- Execute the hibernatedoclet task -->
		<hibernatedoclet destdir="${src.dir}" excludedtags="@version,@author,@todo" force="${generateforce}" mergedir="${src.dir}" verbose="false">
			<fileset dir="${src.dir}">
				<include name="**/domain/*.java" />
				<include name="**/cde/*.java" />
			</fileset>
			<hibernate version="2.0" />
		</hibernatedoclet>

		<!-- Upgrade grammar from Hibernate1 to Hibernate2 -->
		<replace dir="${src.dir}">
			<include name="**/domain/*.hbm.xml" />
			<include name="**/cde/*.hbm.xml" />
			<replacefilter token="readonly=" value="inverse=" />
			<replacefilter token="role=" value="name=" />
			<replacefilter token="hibernate-mapping.dtd" value="hibernate-mapping-2.0.dtd" />
		</replace>

		<copy todir="${hbm.dir}">
			<fileset dir="${src.dir}/edu/wustl/query/domain">
				<include name="*.hbm.xml" />
			</fileset>
			<fileset dir="${src.dir}/edu/wustl/common/cde">
				<include name="*.hbm.xml" />
			</fileset>
		</copy>

		<delete>
			<fileset dir="${src.dir}/edu/wustl/query/domain" includes="*.hbm.xml" />
			<fileset dir="${src.dir}/edu/wustl/common/cde" includes="*.hbm.xml" />
		</delete>
	</target>

	<target name="createJavaDoc">
		<javadoc destdir="${client.dir}/JavaDoc" author="true" version="true" use="true" windowtitle="JavaDoc">
			<fileset dir="${project.src.domain}">
				<include name="**/*.java" />
			</fileset>
		</javadoc>
	</target>

	<target name="create_zip" depends="build_jar">
		<property name="zip.dir" value="${dist.dir}/AdvancedQuery_Installable" />
		<property name="zip.file" value="${dist.dir}/AdvancedQuery_Installable.zip" />

		<delete file="${zip.file}" />
		<delete dir="${zip.dir}" />

		<mkdir dir="${zip.dir}" />

		<!--<copy file="./build/query.war" todir="${zip.dir}" overwrite="true" /> -->
		<!--<copy file="./build/dynamicExtensions.war" todir="${zip.dir}" overwrite="true" />-->
		<copy file="${base.dir}/conf/query-ds.xml" todir="${zip.dir}" overwrite="true" />
		<!--<copy file="./src/conf/log4j.properties" todir="${zip.dir}" overwrite="true" /> -->
		<copy file="${base.dir}/conf/queryInstall.properties" todir="${zip.dir}" overwrite="true" />
		<copy file="${base.dir}/conf/queryMainTiles.properties" todir="${zip.dir}" overwrite="true" />
		<copy file="${base.dir}/conf/queryHibernateCfg.properties" todir="${zip.dir}" overwrite="true" />
		<copy file="${target.dir}/WEB-INF/query.properties" todir="${zip.dir}" overwrite="true" />
		<copy file="${target.dir}/WEB-INF/queryDbutil.properties" todir="${zip.dir}" overwrite="true" />
		<copy file="${base.dir}/conf/build-properties.xml" todir="${zip.dir}" overwrite="true" />
		<copy file="${base.dir}/MANIFEST.MF" todir="${zip.dir}" overwrite="true" />
		<copy file="${base.dir}/build/deploy.xml" todir="${zip.dir}" overwrite="true" />
		<copy file="${base.dir}/conf/queryintegration.xml" todir="${zip.dir}" overwrite="true" />
		<copy file="${base.dir}/conf/advanceQuery.properties" todir="${zip.dir}" overwrite="true" />
		<!--copy file="log4j.xml" todir="${zip.dir}" overwrite="true" /> -->
		<!--<copy file="login-config.xml" todir="${zip.dir}" overwrite="true" />
		<copy file="./src/conf/properties-service.xml" todir="${zip.dir}" overwrite="true" /> -->

		<!--Copying the advance query jar to Zip file -->
		<copy file="${dist.dir}/AdvancedQuery.jar" todir="${zip.dir}" overwrite="true" />

		<copy todir="${zip.dir}/query-properties" overwrite="true">
			<fileset dir="${base.dir}/conf/query-properties">
				<exclude name="Accessibility.txt" />
				<exclude name="ContactUs.txt" />
				<exclude name="Disclaimer.txt" />
				<exclude name="LabelGenerator.Properties" />
				<exclude name="log4jConfig.xml" />
				<exclude name="PrivacyNotice.txt" />
				<exclude name="upt.hibernate.cfg.xml" />
				<exclude name="ApplicationSecurityConfig.xml" />
			</fileset>
		</copy>

		<!-- Copy these two config files from tokenizedFiles directory which contains the tekenized files -->
		<copy todir="${target.dir}/WEB-INF/classes" overwrite="true">
			<fileset dir="${base.dir}/src/main/resources/tokenizedFiles">
				<include name="QueryHibernate.cfg.xml" />
				<include name="DynamicExtensionsHibernate.cfg.xml" />
			</fileset>
		</copy>

		<copy todir="${zip.dir}" overwrite="true">
			<fileset dir="${base.dir}/conf">
				<include name="advancequery-struts-config.xml" />
				<include name="AdvanceQuery-tiles-defs.xml" />
			</fileset>
		</copy>

		<copy todir="${zip.dir}" overwrite="true">
			<fileset dir="${target.dir}/WEB-INF/classes/">
				<include name="QueryHibernate.cfg.xml" />
				<include name="DynamicExtensionsHibernate.cfg.xml" />
				<include name="dbutil.properties" />
				<!--<include name = "dynamicUI.xml"/> -->
				<include name="ApplicationResources.properties" />
			</fileset>
		</copy>

		<!---Copying css folder -->
		<copy todir="${zip.dir}/css" overwrite="true">
			<fileset dir="${base.dir}/src/main/web/stylesheets" />
		</copy>

		<!--Copying jss folder -->
		<copy todir="${zip.dir}/jss" overwrite="true">
			<fileset dir="${base.dir}/src/main/web/javascripts" />
		</copy>

		<!--Coying Images -->
		<copy todir="${zip.dir}/images" overwrite="true">
			<!--<fileset dir = "${base.dir}/src/web/images/advQuery/dagViewImages">
				<include name="**/*.*" />
			</fileset>
			<fileset dir = "${base.dir}/src/web/images/advQuery/uIEnhancementImages">
				<exclude name="**/*" />
			</fileset> -->
			<fileset dir="${base.dir}/src/main/web/images">
				<exclude name="**/advQuery/a.gif" />
				<exclude name="**/advQuery/appLogo.gif" />
				<exclude name="**/advQuery/Arm_blk.gif" />
				<exclude name="**/advQuery/Arm_col.gif" />
				<exclude name="**/advQuery/bannerHome2.gif" />
				<exclude name="**/advQuery/bluebox.gif" />
				<exclude name="**/advQuery/cabio58.gif" />
				<exclude name="**/advQuery/caTISSUE_logo.gif" />
				<exclude name="**/advQuery/csm.gif" />
				<exclude name="**/advQuery/Cycle_blk.gif" />
				<exclude name="**/advQuery/Cycle_col.gif" />
				<exclude name="**/advQuery/Distribution.GIF" />
				<exclude name="**/advQuery/DistributionProtocol.GIF" />
				<exclude name="**/advQuery/dot.gif" />
				<exclude name="**/advQuery/e.gif" />
				<exclude name="**/advQuery/footer_firstgov.gif" />
				<exclude name="**/advQuery/footer_hhs.gif" />
				<exclude name="**/advQuery/footer_nci.gif" />
				<exclude name="**/advQuery/footer_nih.gif" />
				<exclude name="**/advQuery/i.gif" />
				<exclude name="**/advQuery/InstitutionLogo.gif" />
				<exclude name="**/advQuery/logot.gif" />
				<exclude name="**/advQuery/logotype.gif" />
				<exclude name="**/advQuery/logotype.jpg" />
				<exclude name="**/advQuery/Participant.GIF" />
				<exclude name="**/advQuery/pendingAliquot.gif" />
				<exclude name="**/advQuery/pendingDerive.gif" />
				<exclude name="**/advQuery/pendingEvent.gif" />
				<exclude name="**/advQuery/pendingPhase.gif" />
				<exclude name="**/advQuery/pendingSCG.gif" />
				<exclude name="**/advQuery/pendingSpecimen.gif" />
				<exclude name="**/advQuery/phase.gif" />
				<exclude name="**/advQuery/Phase_col.gif" />
				<exclude name="**/advQuery/redbox.gif" />
				<exclude name="**/advQuery/sccLogo.gif" />
				<exclude name="**/advQuery/sdk.gif" />
				<exclude name="**/advQuery/sdk.jpg" />
				<exclude name="**/advQuery/sdkLogoSmall.gif" />
				<exclude name="**/advQuery/sdkLogoSmall2.gif" />
				<exclude name="**/advQuery/tagline.gif" />
				<exclude name="**/advQuery/HomeImage.jpg" />
				<exclude name="**/advQuery/favicon.ico" />
				<exclude name="**/advQuery/appLogo.jpg" />
				<exclude name="**/advQuery/specimen.jpg" />
				<exclude name="**/advQuery/uIEnhancementImages/**" />
			</fileset>
		</copy>

		<!--Copying pages -->
		<copy todir="${zip.dir}/pages" overwrite="true">

			<fileset dir="${base.dir}/src/main/web/pages">
				<exclude name="QueryApplicationHeader.jsp" />
				<exclude name="QueryApplicationHeaderLogin.jsp" />
				<exclude name="QueryIndex.jsp" />
				<exclude name="QueryMainFooter.jsp" />
				<exclude name="QueryMainHeader.jsp" />
				<exclude name="QueryMainHeaderLogin.jsp" />
				<exclude name="**/mainMenu/HomeLogo.jsp" />
				<exclude name="**/advQuery/content/home/Error.jsp" />
				<exclude name="**/advQuery/content/common/RedirectToLoginPage.jsp" />
				<exclude name="**/advQuery/content/search/ParticipantSearch.jsp" />
				<exclude name="**/advQuery/content/search/SpecimenCollectionGroupSearch.jsp" />
				<exclude name="**/advQuery/content/search/SpecimenSearch.jsp" />
				<exclude name="**/advQuery/content/search/DistributionReport.jsp" />
			</fileset>
		</copy>

		<!--Copying the flex related files from WEB-INF/flex -->
		<copy todir="${zip.dir}/flex">
			<fileset dir="${base.dir}/src/main/resources/flex">
				<include name="cache.dep" />
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</copy>

		<!-- Copying flex components-->
		<copy todir="${zip.dir}/flexclient" overwrite="true">
			<fileset dir="${base.dir}/src/main/resources/flexclient" />
		</copy>

		<!--Added By Baljeet for meta data loading -->
		<!--copy todir ="${zip.dir}/csv" overwrite="true">
			<fileset dir="${base.dir}/src/conf/csv" />
		</copy>

		<copy todir ="${zip.dir}/xmi" overwrite="true">
			<fileset dir="${base.dir}/xmi" />
        </copy -->

		<!--Baljeet's changes ends here -->

		<copy todir="${zip.dir}/lib" overwrite="true">
			<fileset file="${lib.dir}/ant-contrib.jar" />
			<fileset file="${lib.dir}/mysql-connector-java-5.0.8-bin.jar" />
			<fileset file="${lib.dir}/oracleDriver.jar" />
			<!--<fileset file="${lib.dir}/dom4j-1.6.jar" />
			<fileset file="${lib.dir}/lib/j2ee.jar" /> -->
			<fileset file="${lib.dir}/log4j-1.2.9.jar" />

		</copy>

		<copy todir="${zip.dir}/SQL" overwrite="true">
			<fileset dir="${base.dir}/db" />
		</copy>

		<!-- DE conf files -->
		<copy todir="${zip.dir}/DE_conf" overwrite="true">
			<fileset dir="${base.dir}/conf/DE_conf" />
		</copy>

		<!-- DE conf files end -->
		<zip destfile="${zip.file}" basedir="${zip.dir}" />
		<delete dir="${zip.dir}" />
	</target>


	<!-- =================================================================== -->
	<!-- Junit test case execution report                                    -->
	<!-- =================================================================== -->
	<target name="run_junit_testcases">
		<mkdir dir="${target.dir}/reports" />
		<mkdir dir="${target.dir}/reports/junit" />

		<junit printsummary="yes" fork="yes" haltonfailure="no">
			<formatter type="xml" />

			<!--
					Specify the name of the coverage data file to use.
					The value specified below is the default.
 	     -->
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.dir}/coverage.ser" />


			<classpath>
				<pathelement path="${cobertura.dir}" />
				<pathelement path="${target.dir}" />
			</classpath>

			<classpath refid="junit.classpath" />

			<batchtest todir="${target.dir}/reports/junit">
				<fileset dir="${src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>

		</junit>
	</target>


	<target name="gen_report_junit_testcases">
		<antcall target="clean" />
		<antcall target="compile" />
		<antcall target="run_junit_testcases" />
		<mkdir dir="${report.dir}/reports/junit" />

		<junitreport todir="${report.dir}/reports/junit">
			<fileset dir="${target.dir}/reports/junit">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${report.dir}/reports/junit" />
		</junitreport>
	</target>

	<!-- =================================================================== -->
	<!-- JMeter TestCases for Nightly Build  -->
	<!-- =================================================================== -->
	<property name="Jmeter-Tests" value="${target.dir}/Jmeter-Tests" />
	<property name="testplan" value="CaTissueJMeterTests" />
	<property name="jtl" value="JTL" />

	<mkdir dir="${Jmeter-Tests}/${jtl}" />

	<taskdef name="jmeter" classpath="${lib.dir}/ant-jmeter.jar" classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" />

	<target name="JMeterTests" depends="runJmeterTests,JmeterReport" />
	<target name="runJmeterTests">
		<delete file="${Jmeter-Tests}/Mysql_CaTissueJMeterTests.html" />
		<delete file="${Jmeter-Tests}/Oracle_CaTissueJMeterTests.html" />
		<delete file="${Jmeter-Tests}/${testplan}.html" />
		<delete file="${Jmeter-Tests}/${jtl}/${testplan}.jtl" />
		<jmeter jmeterhome="${jmeter.home.dir}" testplan="${Jmeter-Tests}/${testplan}.jmx" resultlog="${Jmeter-Tests}/${jtl}/${testplan}.jtl">

			<!-- Force suitable defaults -->
			<property name="jmeter.save.saveservice.output_format" value="xml" />
			<property name="jmeter.save.saveservice.assertion_results" value="all" />
			<property name="jmeter.save.saveservice.bytesx" value="true" />
			<property name="file_format.testlog" value="${format}" />
			<property name="jmeter.save.saveservice.response_data.on_error" value="${funcMode}" />
		</jmeter>
	</target>

	<target name="JmeterReport">
		<xslt force="true" in="${Jmeter-Tests}/${jtl}/${testplan}.jtl" out="${Jmeter-Tests}/${testplan}.html" style="${Jmeter-Tests}/jmeter-results-detail-report_21.xsl">
			<param name="showData" expression="${show-data}" />
		</xslt>
	</target>

	<!--  <property name="reportgenerator.input.jmeterfile" value="D:/Nightly_Build/XmlReport/CaTissueJMeterTests.jtl" />
		  <property name="reportgenerator.input.junitfile" value="D:/Nightly_Build/XmlReport/TESTS-TestSuites.xml" />
		  <property name="reportgenerator.output.file" value="D:/Nightly_Build/script/mail_setting.properties" />
	-->
	<property name="reportgenerator.input.junit_mysql_fresh_file" value="${base.dir}/XmlReport/JUnitReports/mysql_fresh_report.xml" />
	<property name="reportgenerator.input.junit_mysql_upgrade_file" value="${base.dir}/XmlReport/JUnitReports/mysql_upgrade_report.xml" />
	<property name="reportgenerator.input.junit_oracle_fresh_file" value="${base.dir}/XmlReport/JUnitReports/oracle_fresh_report.xml" />
	<property name="reportgenerator.input.junit_oracle_upgrade_file" value="${base.dir}/XmlReport/JUnitReports/oracle_upgrade_report.xml" />

	<property name="reportgenerator.input.jmeter_mysql_fresh_file" value="${base.dir}/XmlReport/JMeterReports/Mysql_Fresh_CaTissueJMeterTests.jtl" />
	<property name="reportgenerator.input.jmeter_mysql_upgrade_file" value="${base.dir}/XmlReport/JMeterReports/Mysql_Upgrade_CaTissueJMeterTests.jtl" />
	<property name="reportgenerator.input.jmeter_oracle_fresh_file" value="${base.dir}/XmlReport/JMeterReports/Oracle_Fresh_CaTissueJMeterTests.jtl" />
	<property name="reportgenerator.input.jmeter_oracle_upgrade_file" value="${base.dir}/XmlReport/JMeterReports/Oracle_Upgrade_CaTissueJMeterTests.jtl" />

	<target name="GenerateNightlyBuildReport" depends="compile">
		<java classname="NightlyBuildReportGenerator" fork="true">
			<arg value="${reportgenerator.input.junit_mysql_fresh_file}" />
			<arg value="${reportgenerator.input.junit_mysql_upgrade_file}" />
			<arg value="${reportgenerator.input.junit_oracle_fresh_file}" />
			<arg value="${reportgenerator.input.junit_oracle_upgrade_file}" />
			<arg value="${reportgenerator.input.jmeter_mysql_fresh_file}" />
			<arg value="${reportgenerator.input.jmeter_mysql_upgrade_file}" />
			<arg value="${reportgenerator.input.jmeter_oracle_fresh_file}" />
			<arg value="${reportgenerator.input.jmeter_oracle_upgrade_file}" />
			<!--<arg value="${reportgenerator.input.jmeterfile}" />
				<arg value="${reportgenerator.input.junitfile}" />
				<arg value="${reportgenerator.output.file}" />-->
			<classpath>
				<pathelement location="./WEB-INF/classes" />
			</classpath>

		</java>

	</target>


	<!--<target name="sendMail"  description="Send mail">
	        <mail ssl="off" user="${proxy.username}" password="${proxy.password}" mailhost="${proxy.host}" tolist="${proxy.to}" cclist="${proxy.cc}" subject="${proxy.subject}" from="${proxy.from}" >
	            <message> "${proxy.message}"</message>
	            <fileset dir="${proxy.dir1}" includes="*.*" ></fileset>
				<fileset dir="${proxy.dir2}" includes="${proxy.fileName}" ></fileset>
	        </mail>
	 </target>
	-->

	<target name="build_DomainObject_jar" depends="compile" description="To create jar which contains domain object along with its hbm file. This is required for Query Metedata loading.">
		<jar taskname="buildJar" jarfile="${base.dir}/queryDomain.jar">
			<fileset dir="${target.dir}/WEB-INF/classes">
				<include name="**/*.hbm.xml" />
				<include name="**/edu/wustl/query/domain/**" />
				<include name="**/edu/wustl/query/actionForm/**" />
				<include name="**/edu/wustl/query/bean/**" />
			</fileset>
		</jar>
	</target>

	<!-- flex related targets -->
	<taskdef resource="flexTasks.tasks" classpath="${base.dir}/lib/server/flexTasks.jar" />

	<target name="compile_dag_flex">
		<mxmlc file="${FLEX_APP_ROOT}/advQuery/dag/Dag.mxml" keep-generated-actionscript="true">
			<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
			<source-path path-element="${FLEX_HOME}/frameworks" />
		</mxmlc>
	</target>

	<!-- flex related target finish -->
	<target name="dist" depends="create_zip, build_war"></target>

	<!-- Target create jar file added By Baljeet-->

	<target name="build_jar" depends="compile">
		<tstamp />
		<!--<delete file="${dist.dir}/AdvancedQuery.jar" failonerror="false"/>-->
		<jar jarfile="${dist.dir}/AdvancedQuery.jar" basedir="${target.dir}/WEB-INF/classes">
			<manifest>
				<section name="${aq.jar.details}">
					<attribute name="Version" value="${aq.jar.version}" />
					<attribute name="Built-By" value="${aq.jar.creator}" />
					<attribute name="Built-At-Time" value="${TODAY} ${TSTAMP}" />
					<attribute name="SVN-URL" value="${dist.revision}" />
				</section>
			</manifest>
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- Junit test cases & Cobertura code coverage report                                      -->
	<!-- =================================================================== -->

	<target name="generate_codecoverage_report">
		<antcall target="instrument" />
		<antcall target="compile_junit_TestCases" />
		<ant target="runJunitTestCases" />
		<antcall target="coverage-report" />
		<!-- <ant antfile="cobertura.xml" target="coverage.check"/> -->
	</target>

	<target name="compile_junit_TestCases">
		<echo>Compiling AQ test cases : </echo>
		<javac destdir="${target.dir}/WEB-INF/classes" includes="**/*.*" includeAntRuntime="false" debug="true">
			<src path="${test.dir}" />
			<classpath refid="app.classpath" />
		</javac>
	</target>

	<path id="app.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="instrument" depends="init,compile">
		<echo>Instrumenting the application classes : </echo>
		<!--
					Remove the coverage data file.
				-->
		<delete file="${cobertura.location}/cobertura.ser" />

		<!--
					Instrument the application classes, writing the
					instrumented classes into ${build.instrumented.dir}.
				-->

		<cobertura-instrument todir="${test.instrumented.dir}">

			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<!--
						The following line causes instrument to ignore any
						source line containing a reference to log4j, for the
						purposes of coverage reporting.
					-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${target.dir}/WEB-INF/classes">
				<!--
							Instrument all the application classes, but
							don't instrument the test classes.
						-->
				<include name="**/*.class" />

			</fileset>
		</cobertura-instrument>
	</target>

	<target name="runJunitTestCases">
		<mkdir dir="${junit.report.dir}" />
		<echo message="Running junit test cases...." />
		<copy file="${base.dir}/conf/query-properties/ApplicationSecurityConfig.xml" todir="${target.dir}/WEB-INF/classes" overwrite="true" />
		<antcall target="replacecfgfiles" />
		<replace dir="${target.dir}/WEB-INF/classes">
			<include name="ApplicationSecurityConfig.xml" />
			<replacefilter token="@@hibernate-config-file@@" value="${target.dir}/WEB-INF/classes/QueryHibernate.cfg.xml" />
		</replace>
		<replace dir="${target.dir}/WEB-INF/classes">
			<include name="ApplicationResources.properties" />
			<replacefilter token="@@app.name@@" value="app.name" />
		</replace>
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="no" maxmemory="1024m">
			<formatter type="xml" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="./cobertura/coverage.ser" />

			<classpath location="${test.instrumented.dir}" />
			<classpath location="${target.dir}/WEB-INF/classes" />

			<classpath>
				<fileset dir="${lib.dir}">
					<exclude name="AdvanceQuery.jar" />
					<exclude name="AdvanceQuery1.2.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>

			<classpath refid="cobertura.classpath" />

			<batchtest todir="${junit.report.dir}">
				<fileset dir="${test.dir}">
					<include name="**/TestAll.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${junit.report.dir}">
			<fileset dir="${junit.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${junit.report.dir}" />
		</junitreport>

		<!--<delete>
			<fileset dir="${junit.report.dir}">
				<include name="**/**/*.xml" />
			</fileset>
		</delete> -->
	</target>

	<target name="replacecfgfiles">
		<copy file="${base.dir}/conf/DE_conf/DynamicExtensionsHibernate.cfg.xml" todir="${target.dir}/WEB-INF/classes" overwrite="true" />
		<copy file="${base.dir}/conf/DE_conf/QueryHibernate.cfg.xml" todir="${target.dir}/WEB-INF/classes" overwrite="true" />
		<if>
			<equals arg1="mysql" arg2="${database.type}" />
			<then>
				<replace dir="${target.dir}/WEB-INF/classes">
					<include name="*.cfg.xml" />
					<replacefilter token="@@DIALECT@@" value="${mysql.dialect.string}" />
					<replacefilter token="@@DRIVER@@" value="com.mysql.jdbc.Driver" />
					<replacefilter token="@@URL@@" value="jdbc:mysql://${database.host}:${database.port}/${database.name}" />
				</replace>
			</then>
			<elseif>
				<equals arg1="oracle" arg2="${database.type}" />
				<then>
					<replace dir="${target.dir}/WEB-INF/classes">
						<include name="*.cfg.xml" />
						<replacefilter token="@@DIALECT@@" value="org.hibernate.dialect.Oracle9Dialect" />
						<replacefilter token="@@DRIVER@@" value="oracle.jdbc.driver.OracleDriver" />
						<replacefilter token="@@URL@@" value="jdbc:oracle:thin:@${database.host}:${database.port}:${database.name}" />
					</replace>
					<replace dir="${target.dir}/WEB-INF/classes">
						<include name="ApplicationDAOProperties.xml" />
						<replacefilter token="MySQLDAOProperties.xml" value="OracleDAOProperties.xml" />
					</replace>
				</then>
			</elseif>
		</if>
		<replace dir="${target.dir}/WEB-INF/classes">
			<include name="*.cfg.xml" />
			<replacefilter token="@@DATABASE_USERNAME@@" value="${database.username}" />
			<replacefilter token="@@DATABASE_PASSWORD@@" value="${database.password}" />
		</replace>
	</target>

	<target name="coverage-report">
		<echo> Generating coverage reports :</echo>
		<mkdir dir="${coverage.dir}/reports/AQCodeCoverageXml" />
		<mkdir dir="${coverage.dir}/reports/AQCodeCoverageHtml" />

		<!--
				Generate an XML file containing the coverage data using
				the "srcdir" attribute.
			-->

		<cobertura-report srcdir="${src.dir}" destdir="${coverage.dir}/reports/AQCodeCoverageXml" format="xml" />

		<!--
					Generate a series of HTML files containing the coverage
					data in a user-readable form using nested source filesets.
			-->
		<cobertura-report destdir="${coverage.dir}/reports/AQCodeCoverageHtml">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>
</project>