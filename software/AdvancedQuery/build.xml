<?xml version ="1.0"?>
<!--
		=================================================================================================
		Build script for AdvancedQuery. It builds the war of the project, jar
		of the application APIs and installable archive.
		======================================================================================================
	-->
<project name="AdvanceQuery-builder" default="war" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--common properties-->
	<property name="base.dir" value="." />
	<property name="root.dir" location="${base.dir}/../.." />
	<property name="docs.dir" location="${root.dir}/docs" />
	<property name="software.dir" location="${root.dir}/software" />
	<property name="target.dir" value="${software.dir}/target" />
	<property name="common.dir" value="${software.dir}/common" />
	<property name="common.resource.dir" location="${software.dir}/common/resources" />

	<property name="project.properties.file" value="${software.dir}/build/project.properties" />

	<property file="${base.dir}/local.properties" />
	<property file="${software.dir}/build/install.properties" />
	<property file="${project.properties.file}" />
	<property file="${envpropertyfile}" />


	<!-- Ivy -->
	<property name="ivy.settings.file" location="${common.dir}/ivy/ivy-settings.xml" />
	<property name="ivy.def.file" location="${common.dir}/ivy/ivy-def.xml" />

	<property name="bda.local.repo.dir" value="${software.dir}/../../bda-local-ivy-repo" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />


	<!-- Source -->
	<property name="src.dir" value="${base.dir}/src" />
	<property name="java.src.dir" value="${src.dir}/java" />
	<property name="web.src.dir" value="${src.dir}/web" />


	<!-- Conf -->
	<property name="resources.dir" value="${src.dir}/resources" />
	<property name="conf.dir" value="${src.dir}/conf" />
	<property name="hibernate.conf.dir" value="${conf.dir}/hibernate-conf" />
	<property name="dao.conf.dir" value="${conf.dir}/dao-conf" />
	<property name="csm.conf.dir" value="${conf.dir}/csm-conf" />
	<property name="app.conf.dir" value="${conf.dir}/app-conf" />
	<property name="jboss.conf.dir" value="${conf.dir}/jboss-conf" />
	<property name="web.conf.dir" value="${conf.dir}/web-conf" />
	<property name="struts.conf.dir" value="${conf.dir}/struts-conf" />

	<!-- Test -->
	<property name="test.dir" value="${base.dir}/test" />
	<property name="unit.test.dir" value="${test.dir}/unit" />
	<property name="functional.test.dir" value="${test.dir}/functional" />
	<property name="acceptance.test.dir" value="${test.dir}/acceptance" />

	<!-- Build -->
	<property name="build.dir" value="${base.dir}/build" />
	<property name="build.classes.dir" value="${build.dir}/classes" />
	<property name="dist.dir" value="${base.dir}/dist" />
	<property name="war.dir" value="${build.dir}/war" />
	<property name="zip.dir" value="${build.dir}/zip" />

	<property name="war.name" value="${application.context.name}.war" />
	<property name="jar.name" value="${application.context.name}.jar" />
	<property name="zip.name" value="${application.context.name}.zip" />

	<!-- libs -->
	<property name="lib.dir" location="${software.dir}/target/lib" />
	<property name="runtime.lib.dir" location="${lib.dir}/runtime" />
	<property name="compile.lib.dir" location="${lib.dir}/compile" />
	<property name="acceptance.lib.dir" location="${lib.dir}/test-acceptance" />
	<property name="checkstyle.lib.dir" location="${lib.dir}/test-checkstyle" />
	<property name="cobertura.lib.dir" location="${lib.dir}/test-cobertura" />
	<property name="findbugs.lib.dir" location="${lib.dir}/test-findbugs" />
	<property name="javancss.lib.dir" location="${lib.dir}/test-javancss" />
	<property name="junit.lib.dir" location="${lib.dir}/test-junit" />
	<property name="pmd.lib.dir" location="${lib.dir}/test-pmd" />
	<property name="selenium.lib.dir" location="${lib.dir}/test-selenium" />
	<property name="simian.lib.dir" location="${lib.dir}/test-simian" />
	<property name="extra.lib.dir" location="${lib.dir}/extra" />
	<property name="javacc.home.dir" location="${lib.dir}/javacc"/>

	<!-- Get the three BDA files needed to set the Ivy environment up -->
	<!--mkdir dir="${bda-download.dir}" /-->
	<property name="commonlibrary.dir" value="" />
	<echo message="commonlibrary.dir = ${commonlibrary.dir}" />

	<!-- Reports -->
	<property name="reports.dir" value="${software.dir}/reports" />
	<property name="reports.simian.dir" value="${reports.dir}/simian" />
	<property name="reports.pmd.dir" value="${reports.dir}/pmd" />
	<property name="reports.checkstyle.dir" value="${reports.dir}/checkstyle/all" />
	<property name="reports.checkstyle.dir.diff" value="${reports.dir}/checkstyle/diff" />
	<property name="reports.javancss.dir" value="${reports.dir}/javancss" />
	<property name="reports.findbugs.dir" value="${reports.dir}/findbugs" />
	<property name="reports.junit.dir" value="${reports.dir}/junit" />
	<property name="reports.cobertura.dir" value="${reports.dir}/cobertura" />

	<!-- Cobertura -->
	<property name="instrumented.dir" value="${build.dir}/instrumented" />
	<property name="cobertura.data.file" value="${instrumented.dir}/cobertura.ser" />


	<!-- BDA -->
	<property name="bda-utils.dir" location="${software.dir}/target/bda-utils" />
	<property name="bda-utils.resource.dir" value="${bda-utils.dir}/resource" />
	<property name="washu-build-utils.dir" location="${software.dir}/target/washu-build-utils" />
	<!--import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" /-->
	<import file="${base.dir}/static-analysis-build.xml" />


	<!-- DAO -->
	<property name="query.mysql.dao.properties.xml" value="AQ-MySQLDAOProperties.xml" />
	<property name="query.oracle.dao.properties.xml" value="AQ-OracleDAOProperties.xml" />
	<property name="query.db2.dao.properties.xml" value="AQ-DB2DAOProperties.xml" />

	<!-- Hibernate -->
	<property name="hbm.dir" value="${java.src.dir}/edu/wustl/query/hbm" />
	<property name="generateforce" value="true" />

	<!-- csm related properties -->
	<!-- <property name="temp.dir" value="${base.dir}/tempQuey" /> -->
	<property name="project.src.domain" value="${java.src.dir}/edu/wustl/query/domain/" />

	<!-- Datasource -->
	<property name="datasource" value="java:/${application.context.name}" />


	<!--XQueryGenrator Logger properties-->
	<property name="xquery.jboss.path" value="jbossHome" />


	<!-- flex related properties -->
	<property name="FLEX_HOME" value="C:/Program Files/Adobe/Flex Builder 2/Flex SDK 2" />
	<property name="FLEX_APP_ROOT" value="${web.src.dir}/flexclient" />
	<property name="flex.dir" value="${web.src.dir}/WEB-INF/flex" />
	<!-- flex related properties finish -->

	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>
	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}" />
	<property name="jboss.common.lib.dir" location="${jboss.home}/server/${jboss.server.name}/lib" />
	<property name="jboss.deploy.dir" location="${jboss.home}/server/${jboss.server.name}/deploy" />
	<property name="jboss.log.dir" location="${jboss.home}/server/${jboss.server.name}/log" />

	<!--Set proxy if you are behind firewall -->
	<setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" proxyuser="${proxy.user}" proxypassword="${proxy.password}" />

	<!--Filtersets-->
	<!-- Filter set for application specific properties -->
	<filterset id="application.properties.filterset" begintoken="@@" endtoken="@@">
		<filter token="jbosshome" value="${jboss.server.url}" />
		<filter token="application.context.name" value="${application.context.name}" />
		<filter token="hibernate-config-file" value="${jboss.server.url}/query-properties/QueryHibernate.cfg.xml" />
		<filter token="jbossHome" value="${jboss.server.url}" />
	</filterset>
	<!-- Filter set for the dataabse properties-->
	<filterset id="db.properties.filterset" begintoken="@@" endtoken="@@">
		<filter token="datasource" value="${datasource}" />
		<filter token="driver" value="${database.driver}" />
		<filter token="database.schema" value="${database.schema}" />
		<filter token="username" value="${database.user}" />
		<filter token="password" value="${database.password}" />
		<filter token="url" value="${database.url}" />
		<filter token="dialect" value="${database.dialect}" />
	</filterset>
	<filterset id="service.properties.filterset" begintoken="@@" endtoken="@@">
		<filter token="app-security-file" value="${jboss.server.url}/query-properties/ApplicationSecurityConfig.xml" />
		<filter token="app-properties-file" value="${jboss.server.url}/query-properties/query_Properties.xml" />
		<filter token="app-dynamicuixml-file" value="${jboss.server.url}/query-properties/dynamicUI.xml" />
		<filter token="vocab-properties-file" value="${jboss.server.url}/query-properties/vocab.properties" />
		<filter token="configured-vocabs-file" value="${jboss.server.url}/query-properties/configuredVocabs.properties" />
		<filter token="lexbig-config-file" value="${jboss.server.url}/data/LexBIGData/config/config.props" />
	</filterset>

	<path id="project.compile.classpath">
		<fileset dir="${lib.dir}/compile">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="project.javacc.classpath">
			<fileset dir="${lib.dir}/run-javacc">
				<include name="*.jar" />
			</fileset>
		</path>
	<path id="project.run.classpath">
		<path refid="project.compile.classpath" />
		<fileset dir="${lib.dir}/runtime">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="project.unit.test.compile.classpath">
		<fileset dir="${lib.dir}/test-junit">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="ivy.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="xdoclet.classpath">
		<path refid="project.compile.classpath" />
		<path refid="project.run.classpath" />
		<pathelement location="${extra.lib.dir}/commons-net-1.2.2.jar" />
		<pathelement location="${extra.lib.dir}/hibernate-tools.jar" />
		<pathelement location="${extra.lib.dir}/servlet-api.jar" />
		<pathelement location="${extra.lib.dir}/xdoclet-1.2.jar" />
		<pathelement location="${extra.lib.dir}/xdoclet-hibernate-module-1.2.jar" />
		<pathelement location="${extra.lib.dir}/xdoclet-xdoclet-module-1.2.jar" />
		<pathelement location="${extra.lib.dir}/xerces.jar" />
		<pathelement location="${extra.lib.dir}/xjavadoc-1.0.2.jar" />
		<pathelement location="${extra.lib.dir}/xsdlib.jar" />
	</path>


	<path id="utility.classpath">
		<fileset dir="${extra.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${extra.lib.dir}/ant-contrib.jar" />
		</classpath>
	</taskdef>
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="utility.classpath" />


	<xmlcatalog id="hibernate.xml.catalog">
		<dtd publicId="-//Hibernate/Hibernate Configuration DTD 3.0//EN" location="${bda-utils.resource.dir}/other-dtds/hibernate-configuration-3.0.dtd" />
		<dtd publicId="-//Hibernate/Hibernate Mapping DTD 3.0//EN" location="${bda-utils.resource.dir}/other-dtds/hibernate-mapping-3.0.dtd" />
	</xmlcatalog>

	<!-- Ivy targets -->
	<target name="ivy:init">
		<echo message="commonlibrary.dir= ${commonlibrary.dir}" />
		<property name="ivy.dep.file" value="${ivy.def.file}" />
		<ivy:settings file="${ivy.settings.file}" />
	</target>

	<target name="ivy:clean" depends="clean:dependencies" description="Clean">
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:cleancache />
	</target>

	<target name="clean:dependencies">
		<delete dir="${compile.lib.dir}" />
		<delete dir="${runtime.lib.dir}" />
		<delete dir="${acceptance.lib.dir}" />
		<delete dir="${checkstyle.lib.dir}" />
		<delete dir="${cobertura.lib.dir}" />
		<delete dir="${findbugs.lib.dir}" />
		<delete dir="${javancss.lib.dir}" />
		<delete dir="${junit.lib.dir}" />
		<delete dir="${pmd.lib.dir}" />
		<delete dir="${selenium.lib.dir}" />
		<delete dir="${simian.lib.dir}" />
	</target>


	<!-- ******************************************************************* -->
	<!-- ** MAIN TARGETS                                                  ** -->
	<!-- ******************************************************************* -->

	<!-- =====================================================================
		 target: ivy:setup
		 Resolves the dependenceis of the application and sets up the
		 applicarion environment.
		 ===================================================================== -->
	<target name="ivy:setup" depends="ivy:setup-runtime,
		        ivy:setup-compile,
				test:ivy-init,
		        ivy:setup-static-analysis" description="Updates the local ivy repository for all build and test dependencies." />

	<!-- =====================================================================
		 target: ivy:setup-runtime
		 Sets up the runtime environment of the application.
		 ===================================================================== -->
	<target name="ivy:setup-runtime" depends="ivy:init">
		<ivy:resolve refresh="true" conf="runtime" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="runtime" />
	</target>

	<!-- =====================================================================
		 target: ivy:setup-runtime
		 Sets up the compile time environment of the application.
		 ===================================================================== -->
	<target name="ivy:setup-compile" depends="ivy:init">
		<ivy:resolve refresh="true" conf="compile" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="compile" />
	</target>


	<!--
		======================================================================
		target:-init
		Creates required directories.
		====================================================================== -->
	<target name="-init" description="initialize" depends="-pre-clean">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}" />
		<!-- Create the temp directory for caCORE CSM war file-->
		<!--  <mkdir dir="${temp.dir}" />-->
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${dist.dir}" />
		<!--
			Configure the appropriate DAO configuration based on the
			database.type. Currently it is assumed that AdvancedQuery and
			DynamicExtention both will be on the same database on same server. If
			both applications are on different databases then modify the
			following block with the appropriate values.
		-->
		<switch value="${database.type}">
			<case value="oracle">
				<property name="query.dao.properties.xml" value="${query.oracle.dao.properties.xml}" />
				<property name="de.dao.properties.xml" value="${query.oracle.dao.properties.xml}" />
				<property name="database.dialect" value="org.hibernate.dialect.OracleDialect" />
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver" />

			</case>
			<case value="mysql">
				<property name="query.dao.properties.xml" value="${query.mysql.dao.properties.xml}" />
				<property name="de.dao.properties.xml" value="${query.mysql.dao.properties.xml}" />
				<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect" />
				<property name="database.driver" value="com.mysql.jdbc.Driver" />

			</case>
			<case value="db2">
				<property name="query.dao.properties.xml" value="${query.db2.dao.properties.xml}" />
				<property name="de.dao.properties.xml" value="${query.db2.dao.properties.xml}" />
				<property name="database.dialect" value="org.hibernate.dialect.DB2Dialect" />
				<property name="database.driver" value="com.ibm.db2.jcc.DB2Driver" />
			</case>
			<default>
				<fail message="Invalid database type ${database.type}" />
			</default>
		</switch>
	</target>
	<!--
		=======================================
		target:-pre-clean Cleans all the
		buildtime directories.
		=======================================
	-->
	<target name="-pre-clean" description="clean up">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<!-- <delete dir="${temp.dir}" /> -->
	</target>
	<!--
		=========================================
		target:compile
		=========================================
	-->
	<!--<target name="compile:application-code" depends="-init,generate-hbm">-->
	<target name="compile:application-code" depends="-init">
		<ant target="run_javacc"/>
		<javac destdir="${build.classes.dir}" includes="**/*.*" includeAntRuntime="false" debug="yes" target="1.5" failonerror="true">
			<src path="${java.src.dir}" />
			<classpath refid="project.compile.classpath" />
			<classpath>
				<pathelement location="${ant.home}\lib\ant.jar" />
			</classpath>
		</javac>
		<ant target="compile:configure-application" />
	</target>
	<!-- - - - - - - - - - - - - - - - - -
          target: run_javacc
         - - - - - - - - - - - - - - - - - -->
    <target name="run_javacc">
        <javacc
            target="${java.src.dir}/edu/wustl/common/query/impl/predicate/WherePartParser.jj"
            outputdirectory="${java.src.dir}/edu/wustl/common/query/impl/predicate"
            javacchome="${javacc.home.dir}"
            static="false"
        />
    </target>

	<!--
		=========================================
		target:compile:configure-application
		=========================================
	-->
	<target name="compile:configure-application">

		<concat append="true" destfile="${build.classes.dir}/ApplicationResources.properties">
			<filelist dir="${app.conf.dir}" files="ApplicationResources.properties,common-module.properties" />
		</concat>
		<replace file="${build.classes.dir}/ApplicationResources.properties" token="@@application.context.name@@" value="${application.context.name}" />
		<!--
			Copy the .xml,.properties and any other files from src folder to
			classes folder
		 -->
		<copy todir="${build.classes.dir}">
			<fileset dir="${java.src.dir}">
				<include name="**/*.hbm.xml" />
			</fileset>
		</copy>
		<copy todir="${build.classes.dir}" overwrite="true">
			<fileset dir="${app.conf.dir}">
				<include name="log4j.properties" />
				<include name="**/*.xml" />
			</fileset>
		</copy>
		<if>
			<equals arg1="${standalone}" arg2="true" />
			<then>
				<replace file="${build.classes.dir}/log4j.properties" token="@@jbosshome@@" value="${build.dir}" />
			</then>
			<else>
				<replace file="${build.classes.dir}/log4j.properties" token="@@jbosshome@@" value="${jboss.server.url}" />
			</else>
		</if>
		<ant target="compile:configure-hibernate" />
		<ant target="compile:configure-dao" />
	</target>
	<!--
		=========================================
		target:compile:configure-hibernate
		=========================================
	-->
	<target name="compile:configure-hibernate">
		<delete file="${hibernate.conf.dir}/hibernate.db.cfg.xml" />
		<if>
			<equals arg1="${standalone}" arg2="true" />
			<then>
				<ant target="compile:configure-standalone-hibernate-props" />
			</then>
			<else>
				<ant target="compile:configure-web-hibernate-props" />
			</else>
		</if>
		<xmltask source="${hibernate.conf.dir}/QueryHibernate.cfg.xml" dest="${build.classes.dir}/QueryHibernate.cfg.xml" preserveType="true">
			<xmlcatalog refid="hibernate.xml.catalog" />
			<insert path="/hibernate-configuration/session-factory/property[1]" position="before" file="${hibernate.conf.dir}/hibernate.db.cfg.xml" />
		</xmltask>
		<xmltask source="${hibernate.conf.dir}/DynamicExtensionsHibernate.cfg.xml" dest="${build.classes.dir}/DynamicExtensionsHibernate.cfg.xml" preserveType="true">
			<xmlcatalog refid="hibernate.xml.catalog" />
			<insert path="/hibernate-configuration/session-factory/property[1]" position="before" file="${hibernate.conf.dir}/hibernate.db.cfg.xml" />
		</xmltask>
	</target>
	<!--
		=========================================
		target:compile:configure-standalone-hibernate-props
		=========================================
	-->
	<target name="compile:configure-standalone-hibernate-props">
		<copy file="${hibernate.conf.dir}/standalone-hibernate-dbcfg.xml" tofile="${hibernate.conf.dir}/hibernate.db.cfg.xml" filtering="true" overwrite="true">
			<filterset refid="db.properties.filterset" />
		</copy>
	</target>
	<!--
		=========================================
		target:compile:configure-web-hibernate-props
		=========================================
	-->
	<target name="compile:configure-web-hibernate-props">
		<copy file="${hibernate.conf.dir}/webapp-hibernate-dbcfg.xml" tofile="${hibernate.conf.dir}/hibernate.db.cfg.xml" filtering="true" overwrite="true">
			<filterset refid="db.properties.filterset" />
		</copy>
	</target>
	<!--
		=========================================
		target:compile:configure-dao
		=========================================
	-->
	<target name="compile:configure-dao">
		<!--
			Copy the DAO properties files from DAO-conf folder to classes folder
		-->
		<copy todir="${build.classes.dir}" filtering="true" overwrite="true">
			<fileset dir="${dao.conf.dir}">
				<include name="ApplicationDAOProperties.xml" />
				<include name="${query.dao.properties.xml}" />
				<include name="${de.dao.properties.xml}" />
			</fileset>
			<filterset begintoken="@@" endtoken="@@">
				<filter token="query.hibernate.cfg.xml" value="QueryHibernate.cfg.xml" />
				<filter token="de.hibernate.cfg.xml" value="DynamicExtensionsHibernate.cfg.xml" />
				<filter token="query.dao.properties.xml" value="${query.dao.properties.xml}" />
				<filter token="de.dao.properties.xml" value="${de.dao.properties.xml}" />
				<filter token="application.context.name" value="${application.context.name}" />
			</filterset>
		</copy>
	</target>
	<!--
		=========================================
		target:jar
		=========================================
	-->
	<target name="jar" depends="compile:application-code" description="Makes JAR archive.The JAR artifact is often moved to the project-level target folder to prevent it from being deleted during post-clean. ">
		<tstamp />
		<jar destfile="${build.dir}/${jar.name}">
			<fileset dir="${build.classes.dir}" />
			<manifest>
				<attribute name="Built-At-Time" value="${TODAY} ${TSTAMP}" />
			</manifest>
		</jar>
		<!--
			<copy file="${build.dir}/${jar.name}" todir="${dist.dir}"
			overwrite="true" /> <delete file="${build.dir}/${jar.name}" />
		-->
	</target>
	<target name="build-api" depends="jar">
		<copy file="${build.dir}/${jar.name}" todir="${dist.dir}" overwrite="true" />
		<delete file="${build.dir}/${jar.name}" />
	</target>

	<!--
		=========================================
		target:build:all
		=========================================
	-->
	<target name="build:all" description="Executes the sequence of -pre-clean, -init, dist, static-analysis, test, post-clean " depends="
		-pre-clean,
		-init,
		dist,
		static-analysis,
		test,
		post-clean ">
	</target>
	<!--
		=========================================
		target:dist
		=========================================
	-->
	<target name="dist" depends="war,dist:configurations">
		<antcall target="copy-dist" />
		<antcall target="post-clean" />
	</target>
	<!--
		=========================================
		target:test
		=========================================
	-->
	<target name="test" description="Runs Junits.">
		<property name="standalone" value="true" />
		<antcall target="compile:application-code" />
		<antcall target="compile:test-cases" />
		<antcall target="test:configure-test-env" />
		<antcall target="static-analysis:cobertura" />
	</target>

	<!--
		=========================================
		target:test:configure-test-env
		=========================================
	-->
	<target name="test:configure-test-env">
		<delete dir="${build.dir}/query-properties" />
		<mkdir dir="${build.dir}/query-properties" />
		<copy todir="${build.dir}/query-properties">
			<fileset dir="${app.conf.dir}">
				<include name="vocab.properties" />
				<include name="query.properties" />
				<include name="configuredVocabs.properties" />
				<include name="query_Properties.xml" />
			</fileset>
		</copy>
		<xmltask source="${unit.test.dir}/conf/query.Testhibernate.cfg.xml" dest="${build.dir}/query-properties/query.Testhibernate.cfg.xml" preserveType="true">
			<insert path="/hibernate-configuration/session-factory/property[1]" position="before" file="${hibernate.conf.dir}/hibernate.db.cfg.xml" />
		</xmltask>
		<copy file="${unit.test.dir}/conf/ApplicationSecurityConfig.xml" todir="${build.dir}/query-properties" filtering="true" overwrite="true">
			<filterset begintoken="@@" endtoken="@@">
				<filter token="hibernate-config-file" value="${build.dir}/query-properties/query.Testhibernate.cfg.xml" />
			</filterset>
		</copy>
		<xmltask source="${build.classes.dir}/QueryHibernate.cfg.xml" dest="${build.classes.dir}/QueryHibernate.cfg.xml" preserveType="true">
			<xmlcatalog refid="hibernate.xml.catalog" />
			<insert path="/hibernate-configuration/session-factory/mapping[last()]" position="after" file="${unit.test.dir}/conf/CIDERHibernate.cfg.xml" />
		</xmltask>
	</target>
	<target name="war:init">
		<mkdir dir="${war.dir}" />
		<delete file="${base.dir}/MANIFEST.MF" />
		<manifest file="${base.dir}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Version" value="${application.name} ${application.version}" />
			<attribute name="CSM-Version" value="${csm.version}" />
			<attribute name="caCore-Version" value="${cacore.version}" />
			<attribute name="Build-on" value="${TODAY}" />
		</manifest>
	</target>

	<!--
		=========================================
		target:war
		=========================================
	-->
	<target name="war" description="Makes a WAR archive. The WAR artifact is often moved to the project-level target folder to prevent it from being deleted during post-clean." depends="compile:application-code,war:init,war:prepare-web-inf">
		<war destfile="${build.dir}/${war.name}" webxml="${war.dir}/WEB-INF/web.xml" duplicate="preserve" manifest="${base.dir}/MANIFEST.MF">
			<fileset dir="${war.dir}">
				<include name="css/**" />
				<include name="images/**" />
				<include name="jss/**" />
				<include name="dhtml_comp/**" />
				<include name="pages/**" />
				<include name="flexclient/**" />
				<include name="WEB-INF/**" />
				<include name="WEB-INF/flex/**" />
				<include name="ApplicationVersionInfo.txt" />
				<exclude name="**/WEB-INF/lib/*.zip" />
				<exclude name="**/WEB-INF/lib/junit*.jar" />
				<exclude name="**/*servlet.jar*" />
				<exclude name="**/*hibernate2.jar*" />
				<exclude name="**/*jta*.jar*" />
				<exclude name="**/svn*" />
				<exclude name="**/WEB-INF/lib/jta-*.jar" />
			</fileset>
		</war>
	</target>
	<target name="war:prepare-web-inf">
		<mkdir dir="${war.dir}/WEB-INF" />
		<!-- copy over the built classes to WEB-INF/classes-->
		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${build.classes.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${war.dir}/WEB-INF/flex">
			<fileset dir="${root.dir}/tools/flex">
				<include name="**" />
			</fileset>
		</copy>
		<!-- copy over the required jars to WEB-INF/lib-->
		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset dir="${lib.dir}/compile">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${lib.dir}/runtime">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy file="${web.conf.dir}/web.xml" todir="${war.dir}/WEB-INF" overwrite="true" />
		<replace file="${war.dir}/WEB-INF/web.xml">
			<replacefilter token="&lt;session-timeout>30&lt;/session-timeout>" value="&lt;session-timeout>${session.timeout}&lt;/session-timeout>" />
		</replace>
		<copy todir="${war.dir}/WEB-INF">
			<fileset dir="${web.src.dir}/tilesdef">
				<include name="*.*" />
			</fileset>
			<fileset dir="${struts.conf.dir}">
				<include name="*.*" />
			</fileset>
			<fileset dir="${resources.dir}/dtd">
				<include name="struts-config_1_1.dtd"/>
			</fileset>
		</copy>
		<replace file="${war.dir}/WEB-INF/AdvanceQuery-tiles-defs.xml" propertyfile="${resources.dir}/properties/tiles.properties">
			<!--<include name="AdvanceQuery-tiles-defs.xml" />-->
			<replacefilter token="@@tilesTitle@@" property="tilesTitle" />
			<replacefilter token="@@tilesHeader@@" property="tilesHeader" />
			<replacefilter token="@@tilesAppHeader@@" property="tilesAppHeader" />
			<replacefilter token="@@tilesMainMenu@@" property="tilesMainMenu" />
			<!--replacefilter token="@@tilesQuickLaunch@@" property="${tilesQuickLaunch}"/-->
			<replacefilter token="@@tilesContent@@" property="tilesContent" />
			<replacefilter token="@@tilesFooter@@" property="tilesFooter" />
		</replace>

	</target>

	<!--
		=========================================
		target:dist:configurations
		=========================================
	-->
	<target name="dist:configurations">
		<mkdir dir="${build.dir}/query-properties" />
		<property name="app.dist.conf.dir" value="${build.dir}/query-properties" />
		<copy todir="${app.dist.conf.dir}" filtering="true">
			<fileset dir="${app.conf.dir}">
				<include name="*.*" />
				<exclude name="AdvanceQuery-tiles-defs.xml" />
				<exclude name="ApplicationResources.properties" />
			</fileset>
			<fileset dir="${csm.conf.dir}">
				<include name="*.*" />
			</fileset>
			<fileset dir="${hibernate.conf.dir}">
				<include name="QueryHibernate.cfg.xml" />
			</fileset>
			<filterset refid="application.properties.filterset" />
			<filterset refid="db.properties.filterset" />
		</copy>
		<copy todir="${build.dir}">
			<fileset dir="${jboss.conf.dir}">
				<include name="properties-service.xml" />
				<include name="login-config.xml" />
			</fileset>
			<filterset refid="service.properties.filterset" />
		</copy>
	</target>
	<!--
		=========================================
		target:copy-dist
		=========================================
	-->
	<target name="copy-dist" description="">
		<copy todir="${dist.dir}" overwrite="true" filtering="true">
			<fileset dir="${build.dir}">
				<include name="query-properties/**" />
			</fileset>
		</copy>
		<copy file="${build.dir}/${war.name}" todir="${dist.dir}" overwrite="true" />
		<copy file="${build.dir}/properties-service.xml" todir="${dist.dir}" filtering="true" overwrite="true">
			<filterset refid="service.properties.filterset" />
		</copy>
		<copy file="${build.dir}/login-config.xml" todir="${dist.dir}" overwrite="true" />
	</target>
	<!--
		=========================================
		target:post-clean
		=========================================
	-->
	<target name="post-clean">
		<delete dir="${war.dir}" />
		<delete dir="${app.dist.conf.dir}" />
		<delete file="${build.dir}/properties-service.xml" />
		<delete file="${build.dir}/login-config.xml" />
	</target>
	<!--
		=========================================
		target:generate-hbm
		=========================================
	-->
	<!--
		Generates the Hibernate mapping (HBM) files which are used in mapping
		the domain objects to database schema of the application. This
		generates the HBM files from the XDoclet tags written in the domain
		object classes.
	-->
	<target name="generate-hbm" description="Generates Hibernate class descriptor files.">
		<!-- Define the hibernatedoclet task -->
		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
			<classpath refid="xdoclet.classpath" />
		</taskdef>

		<!-- Execute the hibernatedoclet task -->
		<hibernatedoclet destdir="${java.src.dir}" excludedtags="@version,@author,@todo" force="${generateforce}" mergedir="${java.src.dir}" verbose="false">
			<fileset dir="${java.src.dir}">
				<include name="**/domain/*.java" />
			</fileset>
			<hibernate version="2.0" />
		</hibernatedoclet>

		<!-- Upgrade grammar from Hibernate1 to Hibernate2 -->
		<replace dir="${java.src.dir}">
			<include name="**/domain/*.hbm.xml" />
			<replacefilter token="readonly=" value="inverse=" />
			<replacefilter token="role=" value="name=" />
			<replacefilter token="hibernate-mapping.dtd" value="hibernate-mapping-2.0.dtd" />
		</replace>
		<copy todir="${hbm.dir}">
			<fileset dir="${java.src.dir}/edu/wustl/query/domain">
				<include name="*.hbm.xml" />
			</fileset>
		</copy>
		<delete>
			<fileset dir="${java.src.dir}/edu/wustl/query/domain" includes="*.hbm.xml" />
			<!--
				fileset dir="${java.src.dir}/edu/wustl/common/cde"
				includes="*.hbm.xml" /
			-->
		</delete>
	</target>
	<!--
		=========================================
		target:createJavaDoc
		=========================================
	-->
	<!--
		Need to check about this target. What kind of documents it will
		generate and where should they be put
	-->
	<target name="generate-javadoc">
		<!--
		<javadoc destdir="${client.dir}/JavaDoc" author="true" version="true" use="true" windowtitle="JavaDoc">
			<fileset dir="${project.src.domain}">
				<include name="**/*.java" />
			</fileset>
		</javadoc>
		-->
		<delete dir="${root.dir}/docs/javadoc" />
		<mkdir dir="${root.dir}/docs/javadoc" />
		<generate-javadoc javadoc.output.dir="${root.dir}/docs/javadoc" project.classpath.ref="project.run.classpath" javadoc.window.title="${application.context.name}" javadoc.package.names="edu.wustl.*" project.src.dir="${java.src.dir}" />
	</target>

	<!-- flex related targets -->
	<taskdef resource="flexTasks.tasks" classpath="${base.dir}/lib/flexTasks.jar" />
	<!--
		=========================================
		target:compile_dag_flex
		=========================================
	-->
	<target name="compile:dag-flex">
		<mxmlc file="${FLEX_APP_ROOT}/dag/Dag.mxml" keep-generated-actionscript="true">
			<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
			<source-path path-element="${FLEX_HOME}/frameworks" />
		</mxmlc>
	</target>

	<!-- flex related target finish -->
	<!--
		=================================
		target: publish
		=================================
	-->
	<target name="publish" depends="build-artifacts" description="--> publish this project in the ivy repository">
		<property name="revision" value="${version}" />
		<delete file="${build.dir}/ivy.xml" />
		<ivy:publish artifactspattern="${build.dir}/[artifact].[ext]" resolver="projects" pubrevision="${revision}" status="release" />
		<echo message="project ${ant.project.name} released with version ${revision}" />
	</target>
	<target name="build-artifacts">
		<ant target="jar" />
		<ant target="zip" />
	</target>

	<target name="zip:init">
		<delete dir="${build.dir}/zip" />
		<mkdir dir="${build.dir}/zip" />
	</target>

	<target name="zip:jar" depends="jar">
		<copy file="${build.dir}/${jar.name}" todir="${zip.dir}" overwrite="true" />
	</target>
	<!--
		=================================
		target: zip
		=================================
	-->
	<target name="zip" depends="zip:init,zip:jar,zip:resources,zip:web-source" description="Zips all the artifacts required for application distribution.">
		<zip destfile="${build.dir}/${zip.name}" basedir="${zip.dir}" />
		<delete dir="${zip.dir}" />
	</target>
	<target name="zip:resources">
		<mkdir dir="${zip.dir}/resources" />
		<antcall target="zip:configurations" />
		<antcall target="zip:database-scripts" />
		<antcall target="zip:flex" />
	</target>
	<target name="zip:web-source">
		<copy todir="${zip.dir}/web" overwrite="true">
			<fileset dir="${web.src.dir}" />
		</copy>
	</target>
	<target name="zip:configurations">
		<mkdir dir="${zip.dir}/resources/config" />
		<antcall target="zip:copy-app-conf" />
		<antcall target="zip:copy-hibernate-conf" />
		<antcall target="zip:copy-dao-conf" />
		<antcall target="zip:copy-jboss-conf" />
		<antcall target="zip:copy-csm-conf" />
		<antcall target="zip:copy-web-conf" />
		<antcall target="zip:copy-struts-conf" />
	</target>
	<target name="zip:database-scripts">
		<copy todir="${zip.dir}/resources/db">
			<fileset dir="${base.dir}/db">
				<include name="**" />
			</fileset>
		</copy>
	</target>
	<target name="zip:flex">
		<copydir dest="${zip.dir}/resources/flex" src="${root.dir}/tools/flex" excludes="*svn*/**" />
	</target>
	<target name="zip:copy-app-conf">
		<copy todir="${zip.dir}/resources/config/app-conf" overwrite="true">
			<fileset dir="${app.conf.dir}">
				<exclude name="common-module.properties" />
				<exclude name="*svn*/**" />
			</fileset>
		</copy>
	</target>
	<target name="zip:copy-hibernate-conf">
		<copy todir="${zip.dir}/resources/config/hibernate-conf" overwrite="true">
			<fileset dir="${hibernate.conf.dir}" excludes="*svn*/**" />
		</copy>
	</target>
	<target name="zip:copy-dao-conf">
		<copy todir="${zip.dir}/resources/config/DAO-conf" overwrite="true">
			<fileset dir="${dao.conf.dir}" excludes="*svn*/**" />
		</copy>
	</target>
	<target name="zip:copy-jboss-conf">
		<copy todir="${zip.dir}/resources/config/jboss-conf" overwrite="true">
			<fileset dir="${jboss.conf.dir}" excludes="*svn*/**" />
		</copy>
	</target>
	<target name="zip:copy-csm-conf">
		<copy todir="${zip.dir}/resources/config/csm-conf" overwrite="true">
			<fileset dir="${csm.conf.dir}" excludes="*svn*/**" />
		</copy>
	</target>
	<target name="zip:copy-web-conf">
		<copy todir="${zip.dir}/resources/config/web-conf" overwrite="true">
			<fileset dir="${web.conf.dir}" excludes="*svn*/**" />
		</copy>
	</target>
	<target name="zip:copy-struts-conf">
		<copy todir="${zip.dir}/resources/config/struts-conf" overwrite="true">
			<fileset dir="${struts.conf.dir}" excludes="*svn*/**" />
		</copy>
	</target>

	<target name="compile:test-cases">
		<javac destdir="${build.classes.dir}" includes="**/*.*" includeAntRuntime="false" debug="true" failonerror="true">
			<!--src path="${java.src.dir}"/-->
			<src path="${unit.test.dir}/java" />
			<classpath refid="project.run.classpath" />
			<classpath refid="project.unit.test.compile.classpath" />
		</javac>
		<xmltask source="${unit.test.dir}/conf/query.Testhibernate.cfg.xml" dest="${build.classes.dir}/query.Testhibernate.cfg.xml" preserveType="true">
			<insert path="/hibernate-configuration/session-factory/property[1]" position="before" file="${hibernate.conf.dir}/hibernate.db.cfg.xml" />
		</xmltask>
		<copy file="${unit.test.dir}/conf/ApplicationSecurityConfig.xml" todir="${build.classes.dir}" filtering="true" overwrite="true">
			<filterset begintoken="@@" endtoken="@@">
				<filter token="hibernate-config-file" value="${build.classes.dir}/query.Testhibernate.cfg.xml" />
			</filterset>
		</copy>
	</target>
	<!--
		=========================================
		target:build_DomainObject_jar
		=========================================
	-->
	<target name="build_DomainObject_jar" depends="compile:application-code" description="To create jar which contains domain object along with its hbm file. This is required for Query Metedata loading.">
		<jar taskname="buildJar" jarfile="${base.dir}/queryDomain.jar">
			<fileset dir="${build.classes.dir}">
				<include name="**/*.hbm.xml" />
				<include name="**/edu/wustl/query/domain/**" />
				<include name="**/edu/wustl/query/actionForm/**" />
				<include name="**/edu/wustl/query/bean/**" />
			</fileset>
		</jar>
	</target>
</project>