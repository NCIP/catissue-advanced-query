
<!-- *********************************************************************-->
<!-- ** PROJECT:  Advanced Query                                       ** -->
<!-- *********************************************************************-->
<project name="AdvancedQuery" default="static-analysis" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- *********************************************************************-->
	<!-- ** PROPERTIES / PATHS 												**-->
	<!-- *********************************************************************-->

	<!-- Main -->
	<property name="root.dir" location="${basedir}/../.." />
	<property name="docs.dir" location="${root.dir}/docs" />
	<property name="software.dir" location="${root.dir}/software" />
	<property name="lib.dir" location="${software.dir}/target/lib" />
	<property name="resource.dir" location="${software.dir}/common/resources" />
	<property name="target.dir" location="${software.dir}/target/dist/exploded" />
	<property name="reports.dir" location="${software.dir}/target/reports" />
	<property name="common.dir" value="${software.dir}/common" />
	<property name="project.properties.file" value="${software.dir}/build/project.properties" />
	<property file="${basedir}/local.properties" />
	<property file="${project.properties.file}" />
	<property file="${envpropertyfile}" />


	<!-- Ivy -->
	<property name="ivy.jar" location="${software.dir}/target/lib/ivy-2.0.0.jar" />
	<property name="ivy.settings.file" location="${common.dir}/ivy/ivy-settings.xml" />
	<!--<property name="ivy.def.file" location="ivy-sub-project.xml" />-->
	<property name="ivy.static.def.file" location="${common.dir}/ivy/ivy-test.xml" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="bda-utils.dir" location="${software.dir}/target/bda-utils" />
	<property name="bda-download.dir" location="${common.dir}/bda-download" />
	<!-- Source and Build -->
	<property name="src.dir" value="${base.dir}/src" />
	<property name="java.src.dir" value="${src.dir}/java" />
	<property name="web.src.dir" value="${src.dir}/web" />
	<property name="build.dir" value="${base.dir}/build" />
	<property name="build.classes.dir" value="${build.dir}/classes" />
	<property name="washu-build-utils.dir" location="${software.dir}/target/washu-build-utils" />
	<property name="washu.build.utils.url" value="svn url" />
	<!--get src="${washu.build.utils.url}" dest="${washu-build-utils.dir}/washu-build-utils.xml" /-->

	<!-- Get the three BDA files needed to set the Ivy environment up -->
	<!--
		<get src="${build.bda.src.url}"
		dest="${bda-download.dir}/bda-ivy-build.xml" /> <get
		src="${ivy.bda.settings.src.url}"
		dest="${bda-download.dir}/ivy-bda-settings.xml" /> <get
		src="${ivy.bda.src.url}" dest="${bda-download.dir}/ivy-bda.xml" />
	-->

	<property name="commonlibrary.dir" value="" />
	<echo message="commonlibrary.dir = ${commonlibrary.dir}" />

	<import file="${washu-build-utils.dir}/washu-build-utils.xml" />
	<property file="${washu-build-utils.dir}/resources/static-analysis-tools.properties" />

	<property name="reports.dir" value="${software.dir}/reports" />
	<property name="reports.cpd.dir" value="${reports.dir}/cpd" />
	<property name="reports.pmd.dir" value="${reports.dir}/pmd" />
	<property name="reports.checkstyle.dir" value="${reports.dir}/checkstyle" />
	<property name="reports.jcsc.dir" value="${reports.dir}/jcsc" />
	<property name="reports.findbugs.dir" value="${reports.dir}/findbugs" />
	<property name="reports.jdepend.dir" value="${reports.dir}/jdepend" />
	<property name="reports.spellchecker.dir" value="${reports.dir}/spellchecker" />
	<property name="reports.cobertura.dir" value="${reports.dir}/cobertura" />
	<property name="reports.junit.dir" value="${reports.dir}/junit" />
	<property name="instrumented.dir" value="${build.dir}/instrumented" />
	<property name="cobertura.data.file" value="${instrumented.dir}/cobertura.ser" />
	<property name="bda.local.repo.dir" value="${software.dir}/../../bda-local-ivy-repo" />


	<path id="ivy.classpath">
		<fileset dir="${software.dir}/target/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
	<target name="init:ivy">
		<mkdir dir="${local.repo.dir}" />
		<property name="ivy.dep.file" value="${ivy.static.def.file}" />
		<echo message="IN STATIC:: ${ivy.dep.file}" />
		<ivy:settings file="${ivy.settings.file}" />
	</target>
	<target name="test:ivy-init" depends="
		init:ivy,
		test:ivy-test-selenium,
		test:ivy-test-junit,
		test:ivy-test-cobertura
		" />
	<target name="test:ivy-test-selenium" depends="init:ivy" description="Updates the local ivy repository">
		<!--
		<ivy:resolve refresh="true" conf="test-selenium" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
		-->
		<path id="selenium.classpath">
			<fileset dir="${lib.dir}/test-selenium">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>
	<target name="test:ivy-test-junit" depends="init:ivy" description="Updates the local ivy repository">
		<!--
		<ivy:resolve refresh="true" conf="test-junit" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-junit" />
		<ivy:resolve refresh="true" conf="test-compile" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-compile" />
		-->
		<path id="junit.classpath">
			<fileset dir="${lib.dir}/test-junit">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${lib.dir}/test-compile">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>
	<target name="test:ivy-test-cobertura" depends="init:ivy" description="Updates the local ivy repository">

		<ivy:resolve refresh="true" conf="test-cobertura" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />

		<path id="cobertura.classpath">
			<fileset dir="${lib.dir}/test-cobertura">
				<include name="*.jar" />
			</fileset>
		</path>
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	</target>
	<target name="ivy:setup-static-analysis" depends="
		init:ivy,
		test:ivy-init,
		static-analysis:ivy-test-javancss,
		static-analysis:ivy-test-checkstyle,
		static-analysis:ivy-test-simian,
		static-analysis:ivy-test-pmd,
		static-analysis:ivy-test-jdepend
		" />


	<target name="static-analysis:ivy-init" depends="
		init:ivy,
		static-analysis:ivy-test-javancss,
		static-analysis:ivy-test-checkstyle,
		static-analysis:ivy-test-simian,
		static-analysis:ivy-test-pmd,
		static-analysis:ivy-test-jdepend,
		static-analysis:ivy-test-spellchecker,
		static-analysis:ivy-test-cpd
		" />
	<target name="static-analysis:ivy-test-javancss" depends="init:ivy" description="Updates the local ivy repository">

		<ivy:resolve refresh="true" conf="test-javancss" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-javancss" />
		<path id="javancss.classpath">
			<fileset dir="${lib.dir}/test-javancss">
				<include name="*.jar" />
			</fileset>
		</path>

	</target>
	<target name="static-analysis:ivy-test-checkstyle" depends="init:ivy" description="Updates the local ivy repository">

		<ivy:resolve refresh="true" conf="test-checkstyle" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
		<path id="checkstyle.classpath">
			<fileset dir="${lib.dir}/test-checkstyle">
				<include name="*.jar" />
			</fileset>
		</path>

	</target>
	<target name="static-analysis:ivy-test-pmd" depends="init:ivy" description="Updates the local ivy repository">

		<ivy:resolve refresh="true" conf="test-pmd" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
		<path id="pmd.classpath">
			<fileset dir="${lib.dir}/test-pmd">
				<include name="*.jar" />
			</fileset>
		</path>

	</target>
	<target name="static-analysis:ivy-test-simian" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-simian" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-simian" />
		<path id="simian.classpath">
			<fileset dir="${lib.dir}/test-simian">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>
	<target name="static-analysis:ivy-test-jdepend" depends="init:ivy" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-jdepend" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-jdepend" />
		<path id="jdepend.classpath">
			<fileset dir="${lib.dir}/test-jdepend">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>
	<target name="static-analysis:ivy-test-spellchecker" depends="init:ivy" description="Updates the local ivy repository">
		<!--
		<ivy:resolve refresh="true" conf="test-spellchecker" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-spellchecker" />
		-->
		<path id="spellchecker.classpath">
			<fileset dir="${lib.dir}/test-spellchecker">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>
	<target name="static-analysis:ivy-test-cpd" depends="init:ivy" description="Updates the local ivy repository">
		<!--
		<ivy:resolve refresh="true" conf="test-cpd" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-cpd" />
		-->
		<path id="cpd.classpath">
			<fileset dir="${lib.dir}/test-cpd">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="clean:reports">
		<delete dir="${reports.dir}" />
	</target>
	<!-- This is a wrapper target for all static analysis targets -->
	<!--
		<target name="static-analysis" description="Performs static analysis"
		depends=" static-analysis:ivy-init, static-analysis:init,
		static-analysis:findbugs-init, static-analysis:simian,
		static-analysis:pmd, static-analysis:checkstyle,
		static-analysis:javancss, static-analysis:findbugs,
		static-analysis:diff:pmd, static-analysis:diff:checkstyle ">
	-->
	<!--<target name="static-analysis" description="Performs static analysis" depends="
		static-analysis:ivy-init,
		static-analysis:init,
		static-analysis:findbugs-init,
		static-analysis:simian,
		static-analysis:pmd,
		static-analysis:checkstyle,
		static-analysis:javancss,
		static-analysis:findbugs
		">-->
	<target name="static-analysis" description="Performs static analysis" depends="
				clean:reports,
				static-analysis:ivy-init,
				static-analysis:init,
				static-analysis:findbugs-init,
				static-analysis:jcsc-init,
				static-analysis:pmd,
				static-analysis:checkstyle,
				static-analysis:findbugs,
				static-analysis:cpd,
				static-analysis:spellchecker,
				static-analysis:jdepend,
				static-analysis:jcsc				
				">
		<!--
			<fail if="checkstyle.failure" message="There were Checkstyle
			failures." /> <fail if="pmd.failure" message="There were PMD
			failures." />
		-->
	</target>

	<!-- Creates paths and  directories -->
	<target name="static-analysis:init">
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${reports.simian.dir}" />
		<mkdir dir="${reports.pmd.dir}" />
		<mkdir dir="${reports.checkstyle.dir}" />
		<mkdir dir="${reports.javancss.dir}" />
		<mkdir dir="${reports.findbugs.dir}" />
		<mkdir dir="${reports.cpd.dir}" />
		<mkdir dir="${reports.spellchecker.dir}" />
		<mkdir dir="${reports.jdepend.dir}" />
		<mkdir dir="${reports.jcsc.dir}" />
		<mkdir dir="${reports.junit.dir}" />
		<mkdir dir="${reports.cobertura.dir}" />
	</target>
	<!--
		Findbugs is realy a full application that has ant support. This target
		downloads the binaries for this distribution for use by ant target.
		Additionaly setups a jboss installation to uses in the classpath of
		findbugs to cover runtime libraries
	-->
	<target name="static-analysis:findbugs-init">
		<property name="temp.dir" value="${software.dir}/temp" />
		<mkdir dir="${temp.dir}" />
		<property name="findbugs.home.dir" value="${lib.dir}/${findbugs.binaries.relative.dir}" />
		<if>
			<not>
				<available file="${findbugs.home.dir}/lib/findbugs.jar" />
			</not>
			<then>
				<echo message="Findbugs is missing, downloading and isnstalling in ${findbugs.home.dir}" />
				<get src="${findbugs.src.url}" dest="${temp.dir}/${findbugs.binaries.file}" />
				<unzip dest="${lib.dir}" src="${temp.dir}/${findbugs.binaries.file}" />
			</then>
		</if>
		<path id="findbugs.classpath">
			<fileset dir="${findbugs.home.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>
	<target name="static-analysis:jcsc-init">
		<property name="temp.dir" value="${software.dir}/temp" />
		<mkdir dir="${temp.dir}" />
		<property name="jcsc.home.dir" value="${lib.dir}/${jcsc.binaries.relative.dir}" />
		<if>
			<not>
				<available file="${jcsc.home.dir}/lib/jcsc.jar" />
			</not>
			<then>
				<echo message="Jcsc is missing, downloading and isnstalling in ${jcsc.home.dir}" />
				<get src="${jcsc.src.url}" dest="${temp.dir}/${jcsc.binaries.file}" />
				<unzip dest="${lib.dir}" src="${temp.dir}/${jcsc.binaries.file}" />
			</then>
		</if>
		<path id="jcsc.classpath">
			<fileset dir="${jcsc.home.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>
	<!--
		One target and one macro have been written for each static-analysis
		tool. The macro runs static-analysis on an one set of values. The
		target then calls the macro with values for each sub-project. If a
		user wanted to add options to the static-analysis tool in the the
		macro, they could add an attribute, refer to that attribute in the
		static-analysis call and then add the option to each of the calls to
		the marco in the wrapper target.
	-->
	<!--
		Runs Simian a code duplication reporter. You can find additional
		information about simian at:
		http://www.redhillconsulting.com.au/products/simian/installation.html
	-->
	<target name="static-analysis:simian" depends="static-analysis:init" description="Performs code duplication analysis">
		<static-analysis-simian simian.src.dir="${java.src.dir}" simian.rpt.dir="${reports.simian.dir}" simian.report-xsl.file="${common.dir}/simian/simian.xsl" simian.xml.name="simian-report.xml" simian.html.name="simian-report.html" />
	</target>
	<target name="static-analysis:pmd" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-pmd pmd.src.dir="${java.src.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.root-dir.name="software" pmd.sub-project.name="${application.context.name}" pmd.report-xsl.file="${common.dir}/pmd/pmd-report.xslt" pmd.report-preprocessor.file="${common.dir}/pmd/pmd-hudson-preprocessor.xlst" pmd.rule-set.file="${common.dir}/pmd/${pmd.rule-set.file}" pmd.xml.name="${pmd.xml.name}" pmd.html.name="${pmd.html.name}" />
	</target>
	<target name="static-analysis:diff:pmd" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-diff-pmd differential.file.name="diff_list.txt" pmd.src.dir="${java.src.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.root-dir.name="software" pmd.sub-project.name="${application.context.name}" pmd.report-xsl.file="${common.dir}/pmd/pmd-report.xslt" pmd.report-preprocessor.file="${common.dir}/pmd/pmd-hudson-preprocessor.xlst" pmd.rule-set.file="${common.dir}/pmd/${pmd.rule-set.file}" pmd.xml.name="${pmd.xml.name}" pmd.html.name="${pmd.html.name}" />
		<replaceregexp file="${project.properties.file}" byline="true" match="^(pmd.revision.number)=(.*)" replace="\1=${build.svn.revision}" />
	</target>
	<!--
		Runs JavaNCSS a tool that identifies code Cyclomatic Complexity. You
		can find additional information about JavaNCSS at:
		http://www.kclee.de/clemens/java/javancss/
	-->
	<target name="static-analysis:javancss" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-javancss javancss.src.dir="${java.src.dir}" javancss.rpt.dir="${reports.javancss.dir}" javancss.report-xsl.file="${common.dir}/javancss/javancss2methodhtml.xsl" javancss.xml.name="javancss_metrics.xml" javancss.html.name="javancss_report.html" />
	</target>
	<!--
		Runs Findbugs a tool that attempts to find bugs. You can find
		additional information about findbugs at:
		http://findbugs.sourceforge.net/
	-->
	<target name="static-analysis:findbugs" depends="
		compile:application-code,		
		static-analysis:ivy-init,
		static-analysis:findbugs-init,
		static-analysis:init
		">
		<mkdir dir="${reports.findbugs.dir}/${application.context.name}" />
		<fileset id="findbugs.auxilary.classpath" dir="${lib.dir}">
			<include name="compile/*.jar" />
			<include name="runtime/*.jar" />
		</fileset>
		<static-analysis-findbugs findbugs.home.dir="${findbugs.home.dir}" findbugs.src.dir="${java.src.dir}" findbugs.classes.dir="${build.classes.dir}" findbugs.rpt.dir="${reports.findbugs.dir}/${application.context.name}" findbugs.report-xsl.file="${findbugs.home.dir}/src/xsl/fancy.xsl" findbugs.app.classpath.ref="findbugs.auxilary.classpath" findbugs.xml.name="${findbugs.xml.name}" findbugs.html.name="${findbugs.html.name}" />
	</target>
	<!--
		Runs CheckStyle is a codeing standard violation reporter. You can find
		additional information about checkstyle at:
		http://checkstyle.sourceforge.net/
	-->
	<target name="static-analysis:checkstyle" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-checkstyle checkstyle.src.dir="${java.src.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-simple.xsl" checkstyle.config.file="${common.dir}/checkstyle/${checkstyle.rule-set.file}" checkstyle.xml.name="${checkstyle.xml.name}" checkstyle.html.name="${checkstyle.html.name}" checkstyle.classpath.ref.name="checkstyle.classpath" />
	</target>
	<target name="static-analysis:diff:checkstyle" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-diff-checkstyle differential.file.name="diff_list.txt" checkstyle.src.dir="${java.src.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}/changeset" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-simple.xsl" checkstyle.config.file="${common.dir}/checkstyle/${checkstyle.rule-set.file}" checkstyle.xml.name="${checkstyle.xml.name}" checkstyle.html.name="${checkstyle.html.name}" checkstyle.classpath.ref.name="checkstyle.classpath" />
		<replaceregexp file="${project.properties.file}" byline="true" match="^(checkstyle.revision.number)=(.*)" replace="\1=${build.svn.revision}" />
	</target>

	<target name="static-analysis:cpd" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-cpd cpd.rpt.dir="${reports.cpd.dir}" cpd.src.dir="${java.src.dir}" cpd.classpath="cpd.classpath" />
	</target>
	<target name="static-analysis:spellchecker" depends="
		static-analysis:ivy-init,
		static-analysis:init">
		<static-analysis-spellchecker spellchecker.root.dir="${java.src.dir}" spellchecker.rpt.dir="${reports.spellchecker.dir}" spellchecker.project.dictionary="${common.dir}/spellchecker/${spellchecker.project.dictionary}" />
	</target>
	<target name="static-analysis:jdepend" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-jdepend jdepend.rpt.dir="${reports.jdepend.dir}" jdepend.classes.dir="${build.classes.dir}" />
	</target>
	<target name="static-analysis:jcsc" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-jcsc jcsc.home.dir="${jcsc.home.dir}" jcsc.src.dir="${java.src.dir}" jcsc.rpt.dir="${reports.jcsc.dir}" jcsc.classes.dir="${build.classes.dir}" jcsc.rule-set.file="${common.dir}/jcsc/jcsc.jcsc.xml" />
	</target>
	<!--
		Runs Cobertura a code coveragetool. You can find additional
		information about cobertura at: http://cobertura.sourceforge.net/
	-->
	<target name="static-analysis:cobertura" depends="
		compile:test-cases,
		test:ivy-init,		
		static-analysis:init,
		cobertura:cobertura-instrument,
		test:junit,
		cobertura:coverage-report,
		cobertura:coverage-check
		">
		<!-- 
		<mkdir dir="${basedir}/instrumented/AdvancedQuery-webapp" />
		<static-analysis-cobertura cobertura.src.dir="${src.dir}" cobertura.classes.dir="${build.classes.dir}" cobertura.rpt.dir="${reports.cobertura.dir}/AdvancedQuery-webapp" cobertura.instrumented.dir="${basedir}/instrumented/AdvancedQuery-webapp" cobertura.report-xsl.file="${common.dir}/cobertura/cobertura-simple.xsl" cobertura.ser.file="cobertura.ser" cobertura.config.file="${common.dir}/cobertura/cobertura.xml" />
		 -->
	</target>

	<target name="cobertura:cobertura-instrument" depends="
	compile:test-cases,
	test:ivy-test-cobertura">
		<echo message="Creating dir: ${instrumented.dir}" />
		<mkdir dir="${instrumented.dir}" />
		<!--
	       Instrument the application classes, writing the
	       instrumented classes into ${instrumented.dir}.
	    -->
		<echo message="Instrumenting the classes..." />
		<cobertura-instrument datafile="${cobertura.data.file}" todir="${instrumented.dir}">

			<!--
	         The following line causes instrument to ignore any
	         source line containing a reference to log4j, for the
	         purposes of coverage reporting.
	      	-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${build.classes.dir}">
				<include name="**/PassOneXQueryGenerator.class" />
				<include name="**/AbstractXQueryGenerator.class" />
				<include name="**/QueryGenerator.class" />
				<include name="**/AbstractPredicate.class" />
				<include name="**/InfixPredicate.class" />
				<include name="**/CIDERQueryExecutionThread.class" />
				<include name="**/CiderQueryManager.class" />
				<include name="**/WorkflowBizLogic.class" />
				<include name="**/QueryBizLogic.class" />
				<include name="**/ValidateQueryBizLogic.class" />
				<include name="**/SpreadSheetViewGenerator.class" />
				<include name="**/ResultsViewIQueryCreationUtil.class" />
				<include name="**/workflowexecutor/*.class" />
				<include name="**/DirectedGraph.class" />
				<include name="**/DefineGridViewBizLogic.class" />
				<include name="**/CreateQueryObjectBizLogic.class" />
				<include name="**/CategoryProcessor.class" />
				<include name="**/QueryCSMUtil.class" />
				<include name="**/IQueryTreeGenerationUtil.class" />
				<include name="**/htmlprovider/*.class" />
				<exclude name="**/bizlogic/*Test*.class" />
				<exclude name="**/bizlogic/*Factory*.class" />
				<exclude name="**/bizlogic/*Manager*.class" />
				<exclude name="**/htmlprovider/*Test*.class" />
			</fileset>
		</cobertura-instrument>
		<echo message="Instrumentation Done." />
	</target>

	<target name="test:junit" depends="
	test:ivy-test-junit,
	cobertura:cobertura-instrument">
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes" showoutput="yes">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.file}" />
			<formatter type="xml" />
			<batchtest todir="${reports.junit.dir}">
				<fileset dir="${unit.test.dir}/java">
					<include name="**/QueryTestAll.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${instrumented.dir}" />
				<pathelement location="${build.classes.dir}" />
				<fileset dir="${lib.dir}/runtime">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${lib.dir}/compile">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${lib.dir}/test-cobertura">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${lib.dir}/test-junit">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${lib.dir}/test-compile">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</junit>
		<junitreport todir="${reports.junit.dir}">
			<fileset dir="${reports.junit.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${reports.junit.dir}" />
		</junitreport>
	</target>
	<target name="cobertura:coverage-report" depends="test:ivy-init,static-analysis:init">
		<cobertura-report datafile="${cobertura.data.file}" srcdir="${java.src.dir}" destdir="${reports.cobertura.dir}" format="html">
			<fileset dir="${java.src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>
	<target name="cobertura:coverage-check" depends="test:ivy-init,cobertura:cobertura-instrument">
		<cobertura-check failureproperty="cobertura.failure" datafile="${cobertura.data.file}" haltonfailure="false" linerate="${cobertura.linerate}" branchrate="${cobertura.branchrate}" packagebranchrate="${cobertura.package.branchrate}" packagelinerate="${cobertura.package.linerate}" totalbranchrate="${cobertura.total.branchrate}" totallinerate="${cobertura.total.linerate}" />
	</target>
</project>